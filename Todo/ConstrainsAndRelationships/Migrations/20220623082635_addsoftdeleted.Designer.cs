// <auto-generated />
using System;
using ConstrainsAndRelationships.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConstrainsAndRelationships.Migrations
{
    [DbContext(typeof(UniversityContext))]
    [Migration("20220623082635_addsoftdeleted")]
    partial class addsoftdeleted
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ConstrainsAndRelationships.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CourseId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            DepartmentId = 1,
                            Title = "C#基础"
                        },
                        new
                        {
                            CourseId = 2,
                            DepartmentId = 1,
                            Title = "数据结构"
                        },
                        new
                        {
                            CourseId = 3,
                            DepartmentId = 1,
                            Title = "计算机组成原理"
                        },
                        new
                        {
                            CourseId = 4,
                            DepartmentId = 1,
                            Title = "计算机网络"
                        });
                });

            modelBuilder.Entity("ConstrainsAndRelationships.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<decimal>("Budget")
                        .HasColumnType("money");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartData")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            Budget = 100000m,
                            DepartmentName = "计算机学院",
                            InstructorId = 1,
                            StartData = new DateTime(2022, 6, 23, 8, 26, 34, 636, DateTimeKind.Utc).AddTicks(2617)
                        },
                        new
                        {
                            DepartmentId = 2,
                            Budget = 500000m,
                            DepartmentName = "数学学院",
                            InstructorId = 1,
                            StartData = new DateTime(2022, 6, 23, 8, 26, 34, 636, DateTimeKind.Utc).AddTicks(2622)
                        },
                        new
                        {
                            DepartmentId = 3,
                            Budget = 800000m,
                            DepartmentName = "外语学院",
                            InstructorId = 1,
                            StartData = new DateTime(2022, 6, 23, 8, 26, 34, 636, DateTimeKind.Utc).AddTicks(2624)
                        });
                });

            modelBuilder.Entity("ConstrainsAndRelationships.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            EnrollmentId = 1,
                            CourseId = 1,
                            Grade = 0,
                            StudentId = 1
                        },
                        new
                        {
                            EnrollmentId = 2,
                            CourseId = 2,
                            Grade = 1,
                            StudentId = 1
                        },
                        new
                        {
                            EnrollmentId = 3,
                            CourseId = 3,
                            Grade = 0,
                            StudentId = 2
                        },
                        new
                        {
                            EnrollmentId = 4,
                            CourseId = 4,
                            Grade = 0,
                            StudentId = 2
                        });
                });

            modelBuilder.Entity("ConstrainsAndRelationships.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorId"), 1L, 1);

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstructorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InstructorId");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            InstructorId = 1,
                            HireDate = new DateTime(2022, 6, 23, 8, 26, 34, 636, DateTimeKind.Utc).AddTicks(2563),
                            InstructorName = "Sky1"
                        },
                        new
                        {
                            InstructorId = 2,
                            HireDate = new DateTime(2022, 6, 24, 8, 26, 34, 636, DateTimeKind.Utc).AddTicks(2568),
                            InstructorName = "Sky2"
                        },
                        new
                        {
                            InstructorId = 3,
                            HireDate = new DateTime(2022, 6, 25, 8, 26, 34, 636, DateTimeKind.Utc).AddTicks(2575),
                            InstructorName = "Sky3"
                        },
                        new
                        {
                            InstructorId = 4,
                            HireDate = new DateTime(2022, 6, 26, 8, 26, 34, 636, DateTimeKind.Utc).AddTicks(2577),
                            InstructorName = "Sky4"
                        });
                });

            modelBuilder.Entity("ConstrainsAndRelationships.Models.OfficeAssignment", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InstructorId");

                    b.ToTable("OfficeAssignments");
                });

            modelBuilder.Entity("ConstrainsAndRelationships.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            EnrollmentDate = new DateTime(2022, 6, 23, 8, 26, 34, 636, DateTimeKind.Utc).AddTicks(2497),
                            SoftDeleted = false,
                            StudentName = "s1"
                        },
                        new
                        {
                            StudentId = 2,
                            EnrollmentDate = new DateTime(2022, 6, 23, 8, 26, 34, 636, DateTimeKind.Utc).AddTicks(2508),
                            SoftDeleted = false,
                            StudentName = "s2"
                        },
                        new
                        {
                            StudentId = 3,
                            EnrollmentDate = new DateTime(2022, 6, 23, 8, 26, 34, 636, DateTimeKind.Utc).AddTicks(2511),
                            SoftDeleted = false,
                            StudentName = "s3"
                        });
                });

            modelBuilder.Entity("CourseInstructor", b =>
                {
                    b.Property<int>("CoursesCourseId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorsInstructorId")
                        .HasColumnType("int");

                    b.HasKey("CoursesCourseId", "InstructorsInstructorId");

                    b.HasIndex("InstructorsInstructorId");

                    b.ToTable("CourseInstructor");
                });

            modelBuilder.Entity("ConstrainsAndRelationships.Models.Course", b =>
                {
                    b.HasOne("ConstrainsAndRelationships.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ConstrainsAndRelationships.Models.Department", b =>
                {
                    b.HasOne("ConstrainsAndRelationships.Models.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("ConstrainsAndRelationships.Models.Enrollment", b =>
                {
                    b.HasOne("ConstrainsAndRelationships.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstrainsAndRelationships.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ConstrainsAndRelationships.Models.OfficeAssignment", b =>
                {
                    b.HasOne("ConstrainsAndRelationships.Models.Instructor", "Instructor")
                        .WithOne("OfficeAssignment")
                        .HasForeignKey("ConstrainsAndRelationships.Models.OfficeAssignment", "InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("CourseInstructor", b =>
                {
                    b.HasOne("ConstrainsAndRelationships.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstrainsAndRelationships.Models.Instructor", null)
                        .WithMany()
                        .HasForeignKey("InstructorsInstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConstrainsAndRelationships.Models.Course", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("ConstrainsAndRelationships.Models.Department", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("ConstrainsAndRelationships.Models.Instructor", b =>
                {
                    b.Navigation("OfficeAssignment")
                        .IsRequired();
                });

            modelBuilder.Entity("ConstrainsAndRelationships.Models.Student", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
